# File: app/agents/basic/dynamic_prompt_agent.py

class DynamicPromptAgent:
    """
    Manages a dynamic system prompt, allowing runtime updates
    and execution of agent tasks based on the current prompt.
    """

    def __init__(self, initial_prompt: str = "You are a helpful assistant."):
        """
        Initialize the DynamicPromptAgent with a default or provided prompt.

        Args:
            initial_prompt (str): Initial prompt to guide agent behavior.
        """
        self.system_prompt = initial_prompt

    def update_prompt(self, new_prompt: str) -> str:
        """
        Update the system prompt dynamically at runtime.

        Args:
            new_prompt (str): The new prompt to update the system prompt with.

        Returns:
            str: The updated prompt.
        """
        self.system_prompt = new_prompt
        return self.system_prompt

    def execute(self, input_data: str) -> str:
        """
        Execute agent logic using the current dynamic system prompt.

        Args:
            input_data (str): Input provided to the agent for execution.

        Returns:
            str: The agent's response combining the system prompt and input data.
        """
        # In a realistic scenario, integrate here with OpenAI or other services.
        return f"Prompt: {self.system_prompt}, Input: {input_data}"


# Instantiate a global agent instance for application-wide use.
dynamic_agent = DynamicPromptAgent()

def update_system_prompt(new_prompt: str) -> str:
    """
    Convenience function to update the global agent's system prompt.

    Args:
        new_prompt (str): New prompt text.

    Returns:
        str: The updated prompt text.
    """
    return dynamic_agent.update_prompt(new_prompt)

def execute_dynamic_prompt_agent(input_data: dict) -> str:
    """
    Convenience function to execute the global agent with provided input data.

    Args:
        input_data (dict): Input data containing the 'input' field.

    Returns:
        str: Response generated by the agent.
    """
    return dynamic_agent.execute(input_data["input"])
