# File: app/agents/basic/lifecycle_agent.py

class LifecycleAgent:
    """
    Manages the lifecycle of an agent, demonstrating initialization,
    execution with input data, and termination stages.
    """

    def __init__(self):
        """
        Initialize resources or configurations necessary for the agent.
        """
        self.initialized = False
        self.active = False

    def initialize(self) -> str:
        """
        Initialize the agent lifecycle. Sets the agent status as active.

        Returns:
            str: Confirmation message indicating successful initialization.
        """
        self.initialized = True
        self.active = True
        return "Lifecycle agent initialized."

    def execute(self, input_data: str) -> str:
        """
        Execute the agent's primary task with provided input data.

        Args:
            input_data (str): Data input for agent processing.

        Returns:
            str: Response indicating the agent's action.

        Raises:
            Exception: If the agent is executed before initialization or after termination.
        """
        if not self.active:
            raise Exception("Cannot execute agent: not initialized or already terminated.")
        
        # Placeholder for real execution logic.
        return f"Lifecycle agent executed with input: {input_data}"

    def terminate(self) -> str:
        """
        Terminate the agent lifecycle, cleaning up resources.

        Returns:
            str: Confirmation message indicating successful termination.
        """
        self.active = False
        return "Lifecycle agent terminated."


# Instantiate a global agent instance for consistent usage across the application.
lifecycle_agent = LifecycleAgent()

def initialize_agent() -> str:
    """
    Convenience function to initialize the global lifecycle agent.

    Returns:
        str: Initialization confirmation message.
    """
    return lifecycle_agent.initialize()

def execute_agent(input_data: dict) -> str:
    """
    Convenience function to execute the global lifecycle agent.

    Args:
        input_data (dict): Dictionary containing the key 'input'.

    Returns:
        str: Response generated by the lifecycle agent execution.
    """
    return lifecycle_agent.execute(input_data["input"])

def terminate_agent() -> str:
    """
    Convenience function to terminate the global lifecycle agent.

    Returns:
        str: Termination confirmation message.
    """
    return lifecycle_agent.terminate()
